#include "src/m_learning.h"
#include <ArduinoSTL.h>
#define DIST_MAX 400
#define FPS 40.0


#include <Servo.h>

#define SERVO_G_PIN 9
#define SERVO_D_PIN 10
#define G_CORREC 8
#define D_CORREC -14

#define CAPTEUR_US 11
#define TIMEOUT 18500
#define VITESSE_SON 340.0


#define RAYON_BASE 0.7
#define FULL_SPEED 0.5
#define FACTEUR_DISTANCE 0.7

//const PROGMEM char neuralnetwork_data[393]={3,0,0,0,4,0,0,0,10,0,0,0,4,0,0,0,78,113,30,-63,-78,-113,5,-63,-116,114,31,65,26,103,-95,-64,-84,-41,-72,64,-46,80,15,-63,61,-115,-101,-65,63,-108,18,65,74,65,29,64,94,-121,23,-63,-54,118,-66,-64,-51,6,-23,-65,106,-25,126,64,42,40,-34,64,-6,-3,-8,-64,50,-7,16,-63,-100,21,-103,64,-7,-53,6,-63,82,118,-29,61,125,-28,-54,64,-118,-7,73,64,-73,20,23,65,-52,-85,-90,64,-47,78,10,65,-83,-32,2,65,57,-11,-51,-64,26,98,64,62,-8,37,-37,64,122,0,56,64,66,94,-17,-64,-93,54,-90,63,30,13,1,65,-68,55,-90,-64,-106,-113,-116,64,-106,-59,-76,-64,34,-11,101,63,-15,103,22,-63,7,56,-43,-65,41,72,31,-63,41,8,100,64,49,-40,-91,64,-28,89,-59,64,5,-91,9,65,-110,-44,-69,-64,107,-68,85,-64,-36,-48,-66,-65,88,-70,-68,63,85,42,120,64,-26,54,-1,-64,48,-17,-23,-64,87,69,-46,-64,86,31,69,64,60,-103,-85,-64,-8,-85,-32,64,-7,25,47,64,-84,-110,2,65,107,37,35,64,-79,1,-45,-64,57,-77,4,65,-4,-62,11,-69,88,-41,10,-63,-106,-90,11,-64,-10,104,-2,-64,-128,50,-16,64,-58,88,-100,64,-25,-45,-53,-64,-54,-78,78,64,124,101,-16,64,-83,67,18,65,0,-47,14,-64,12,59,-122,64,86,124,88,64,9,-69,19,-63,-31,62,-82,-65,-46,25,30,-64,3,-111,-104,-64,-40,-24,13,65,37,-102,-6,-64,92,-86,-112,-65,56,115,98,-64,-58,90,-78,62,-98,-107,-126,64,123,-105,26,-63,102,34,-13,-64,22,4,20,64,-25,-91,-83,-66,-117,17,35,-64,119,40,-109,64,-79,1,-75,64,-15,79,-2,-64,123,86,21,-63,75,103,20,-63,-95,57,-24,-64,-38,-62,-119,64,125};
const PROGMEM char neuralnetwork_data[753]={3,0,0,0,4,0,0,0,20,0,0,0,4,0,0,0,43,-121,-58,63,73,75,-119,63,-78,-89,-17,61,113,61,-22,-65,-12,-3,28,-64,-31,82,-44,62,-72,30,29,64,-90,-101,12,-64,-14,-46,-35,-65,-31,122,-108,-66,-9,-91,-37,62,-8,83,43,-64,-125,-64,-110,-64,-10,-88,54,64,43,-121,54,63,106,-68,-92,-65,-68,116,51,-64,98,16,104,-64,92,-113,-98,64,-104,110,106,64,29,90,60,-64,4,86,46,-64,45,-78,-19,63,-16,-89,70,-65,-59,32,-48,-65,98,16,-104,62,113,61,90,64,-102,-103,57,63,116,-27,112,-64,14,45,98,62,80,-115,23,-65,-20,81,-72,-65,-94,69,54,64,-27,-48,-122,-64,-109,24,-112,64,-53,-95,13,-64,2,86,-102,-64,-125,-64,-6,63,31,-118,-21,63,61,-25,-58,-65,27,47,85,-64,119,-66,108,64,-20,81,56,-64,10,-41,91,64,-39,-50,-73,63,-41,-93,80,-65,98,16,96,64,111,18,-125,-68,-96,26,15,63,27,47,93,64,-49,-9,-97,64,-111,24,-124,-65,82,-72,-110,64,-69,50,-45,63,84,-29,101,-65,-100,-60,-96,-66,63,75,27,-64,-2,-44,-104,64,111,18,123,-64,74,12,-14,-65,-23,38,-115,-64,-112,-62,-11,-68,4,86,-122,64,-37,-7,-110,64,-70,94,83,-64,90,100,0,-64,-49,-9,-13,63,-18,124,34,64,25,4,-106,64,88,57,-112,-64,-66,79,-118,-65,0,0,96,64,47,-35,76,-64,127,106,-104,64,106,-62,-126,59,113,61,-86,63,-98,-77,-57,-65,-23,-2,43,-65,-29,-91,27,-66,-37,-7,-82,63,49,8,-100,-64,37,6,73,-64,47,-35,20,64,33,-80,-126,64,117,-109,96,64,-90,-101,100,-64,-114,24,-100,-64,-66,95,15,64,71,-111,114,-64,92,-113,114,64,28,-84,28,-66,0,0,-48,-65,-39,14,9,-64,-59,32,-80,62,117,-114,120,-64,92,-113,90,-64,-18,-22,64,64,78,98,-28,-66,55,-119,1,-64,-45,-99,122,64,103,-72,-60,63,-72,-66,37,-65,-29,50,-125,-64,-98,-17,15,64,-98,-17,82,64,43,71,-11,63,35,-37,121,63,-32,-85,92,-64,81,32,35,64,-4,-87,-15,61,10,-1,35,62,43,-121,-110,64,88,57,-116,-64,-106,47,-113,-64,-64,-54,57,-64,116,-77,-122,63,-37,85,55,63,-10,0,-116,63,-101,-102,-105,-64,-90,40,36,64,93,-113,2,63,-72,30,-127,-65,-125,-64,18,64,64,48,-50,-65,68,-53,85,-64,107,-63,116,-66,-126,45,-117,64,-25,67,-110,63,-82,-44,0,64,-6,126,-6,-65,-33,79,-115,-66,72,-31,58,64,104,-111,-67,-65,31,-123,-121,-64,-109,24,-100,64,-127,-107,75,64,35,-37,-107,-64,121,-23,-126,64,109,-25,-37,-65,-123,-21,-119,64,-80,114,8,64,-29,-91,-21,-65,-47,34,-85,63,98,16,-8,-65,72,-31,-114,-64,-119,65,-96,63,-82,71,-111,63,-6,126,-6,-65,4,86,86,-64,104,-111,-127,64,43,-121,-98,64,39,49,-128,-64,-92,112,-123,64,39,49,88,64,-82,71,-107,-65,-88,-58,115,-64,47,-35,68,-65,35,-37,81,64,8,-84,-100,64,78,98,112,-64,-8,83,107,-64,47,-35,-128,-64,-109,24,4,63,-127,-107,115,-64,-100,-60,80,-64,94,-70,-55,62,49,8,-116,64,-84,28,90,64,76,55,-123,-64,-20,81,-128,64,123,20,110,-65,-14,-46,45,-65,-27,-48,0,64,-37,-7,-110,-64,117,-109,24,64,86,14,45,64,105,119,-2,-65,104,-91,-67,-65,102,102,6,64,68,-117,-84,-66,72,-31,122,64,-68,116,3,64,-117,108,63,-64,23,-39,14,-65,125};
//const PROGMEM char neuralnetwork_data[2437]={4,0,0,0,4,0,0,0,20,0,0,0,20,0,0,0,4,0,0,0,-10,40,84,64,111,18,67,-64,63,53,-114,-64,76,55,89,-64,-49,-9,35,-64,-125,-64,-106,64,82,69,46,64,12,2,83,63,-53,-95,37,-64,63,53,-110,64,-88,-58,107,64,-37,-7,94,63,76,55,81,64,-37,-7,94,63,6,-127,-27,-65,-127,-107,-105,64,58,-102,-39,-65,-29,-91,-105,-64,-31,122,-44,-65,20,-82,-73,63,27,47,61,64,76,55,-115,-64,98,112,103,-64,-3,83,-113,64,-92,112,-83,63,-127,-107,75,64,43,-121,110,64,-49,-9,91,64,2,43,111,-64,-14,-46,-111,-64,88,57,84,63,123,-108,107,63,82,-72,38,-64,-4,-87,-7,-65,4,86,-114,-65,-10,40,116,-64,-8,83,35,-64,63,53,-50,63,-33,79,-19,63,53,94,114,-64,-84,28,39,64,61,10,71,-64,66,96,5,64,-35,36,54,-64,111,18,99,-65,-45,77,-46,63,-37,-7,70,-64,-104,110,26,64,11,-41,-13,63,62,-117,108,62,-68,116,-109,-65,51,94,114,-64,115,114,81,63,-106,67,91,-64,-27,-48,2,64,-4,-87,97,64,-10,40,-104,64,66,96,69,63,20,-82,-41,-65,20,-82,23,64,90,100,-101,63,-41,-93,-124,64,-102,-103,-39,-65,119,-66,31,-67,80,-115,71,-64,72,-31,-70,-65,32,-80,-110,63,-106,67,43,-65,119,-66,95,-64,-106,67,-117,64,-107,67,11,63,27,27,-127,64,25,4,38,64,82,-72,126,64,80,-115,-89,-65,-125,-64,82,-64,-18,124,31,63,12,2,43,-65,14,45,-14,62,-20,81,120,64,-81,71,-107,64,-70,68,44,63,37,6,-99,-64,12,2,-21,63,51,51,-77,-65,-20,-60,8,64,16,88,-71,62,92,-113,-46,-65,-20,81,-120,64,-13,83,102,64,-90,-60,-120,-64,-47,34,85,-64,-68,116,83,-65,109,-25,-109,-64,63,53,-18,-65,-115,-105,62,63,54,94,-118,-65,-8,83,35,63,82,-72,-34,63,117,-109,-40,62,-84,28,106,-64,57,-76,104,64,25,4,-122,-64,-49,-9,123,64,-109,24,-124,-65,-39,-50,63,-64,-18,124,-1,63,115,104,113,63,49,8,100,-64,68,-117,116,64,93,57,52,-66,-86,-15,34,-64,96,-27,-124,-64,-76,-56,110,-64,-82,71,-119,64,-76,-56,-106,-65,-76,-56,118,-66,14,45,-78,-66,-8,83,51,64,5,34,-108,-64,-14,-46,-107,64,-112,-62,-11,-67,-8,83,51,-64,-104,110,-110,-65,-90,-101,-124,62,109,-25,83,-64,-123,-21,-95,63,30,46,10,63,-111,-19,20,64,41,92,-1,-65,31,-123,19,64,88,57,-76,60,80,-115,63,64,-58,124,71,64,125,63,-123,-65,49,8,84,64,127,106,-68,63,-29,-91,19,64,64,53,62,-65,27,47,61,-65,18,-29,-113,63,-115,-105,-126,64,31,-123,-37,63,25,4,-42,-65,-51,-52,-108,-64,31,-123,107,64,74,12,2,-65,121,-23,-122,-65,74,12,-126,62,102,102,-102,-64,102,102,78,64,37,6,-95,63,2,43,-73,63,-33,79,-115,-67,-39,-50,-65,63,-66,-97,26,-64,121,-23,38,62,37,6,-47,-65,121,-23,-114,-64,53,53,-82,-65,-96,26,15,63,-127,109,-77,63,-47,34,-69,63,64,53,-50,-65,29,90,-76,-65,-12,-3,20,-64,8,-84,-4,63,-43,120,9,64,-107,67,51,64,-51,-52,-4,63,-66,-97,82,64,39,49,-120,-66,2,43,23,-64,-39,-50,-109,64,84,-29,101,64,84,-29,37,64,-47,34,83,64,-59,32,16,-65,6,-127,93,-64,123,20,38,-64,-16,-89,-58,-66,-80,114,-104,64,31,-123,-97,-64,27,47,125,-64,-10,40,-100,-66,-47,34,85,-64,82,-72,30,64,72,-31,-102,63,-53,-95,69,62,96,-27,64,64,94,-70,-113,63,-98,-17,-121,-64,90,100,-121,-64,-31,122,-128,64,109,-25,91,-65,-61,-11,72,-64,92,-113,66,64,84,-29,29,64,-21,81,-72,62,-57,75,87,63,-115,-105,-122,-64,109,-25,-97,-64,-76,-56,-10,63,117,-109,-56,-65,109,-25,-109,64,39,49,72,-64,102,102,126,-64,-84,28,58,-65,80,-115,-89,63,109,-25,27,-64,-76,-56,-42,63,-6,126,-126,-64,31,-123,107,64,-29,-91,83,-64,29,90,84,64,-106,67,-105,64,104,-111,-67,-65,-70,73,76,63,6,-127,45,-64,110,18,-125,61,-125,-64,-102,-64,41,92,95,64,125,63,53,-64,-35,36,-126,-64,78,98,32,64,45,-78,21,-64,-41,-93,-124,64,-88,-58,11,63,104,-111,-67,63,-92,112,-3,-66,-57,75,47,64,-102,-103,17,64,-31,122,-124,-64,-6,126,-86,-66,10,-41,3,64,-125,-64,-22,63,-72,30,-59,63,6,-127,69,64,117,-109,-112,-64,-9,-87,9,-64,-59,32,0,64,-111,-19,92,-65,98,16,-100,-64,-113,-62,61,-64,29,110,52,-64,-49,-9,83,-66,100,59,79,-64,-68,116,51,63,57,-76,-8,63,33,-80,114,-65,-18,124,7,64,23,-39,6,64,-33,79,29,-64,-72,30,-119,64,93,-113,66,64,51,51,-77,63,111,18,83,64,10,-41,11,64,-68,116,67,-64,-45,77,98,-66,33,-80,66,64,-74,-13,-107,64,-31,122,60,-64,94,-70,121,64,-92,112,-119,-64,20,-82,-125,64,53,94,58,-64,20,-82,15,64,76,-73,-69,-65,-67,12,-65,-65,76,55,-71,63,88,57,-12,63,-80,114,-88,-65,-12,-3,4,-64,61,10,-105,62,45,-78,93,63,-14,-46,45,64,-29,-91,3,64,-27,-48,58,64,-115,-105,-82,-66,6,-127,29,64,-68,116,19,61,121,-23,78,-64,104,-111,-83,63,-55,118,-118,-64,-14,-46,-103,64,-78,-99,15,-64,63,53,126,64,10,-41,-45,-65,-31,122,124,-64,57,-76,-100,-64,-57,75,47,64,-74,7,6,64,84,-29,53,-64,78,98,0,-64,-102,-103,89,-65,98,16,40,64,-99,-17,-89,61,-16,-89,102,-64,-25,-5,33,64,-92,112,-67,-66,123,20,78,-65,33,-80,-122,-64,-109,24,84,64,-18,124,7,64,12,2,-117,63,-4,-87,81,-65,12,2,43,-66,104,-111,-19,-65,-102,-103,57,-64,-88,-58,-113,64,-6,126,-6,63,115,-24,-66,-65,2,43,39,64,-98,-17,-41,-65,80,-115,-113,-64,-33,59,-99,-65,-12,-3,36,-64,43,-121,86,63,-109,24,-60,-65,43,-121,-102,64,-23,38,113,63,33,-80,124,-64,-111,-19,-36,-65,-70,73,12,-65,-70,73,76,-65,-47,34,27,64,-28,1,59,-64,-121,22,-119,64,-59,96,49,62,-94,69,118,63,12,2,-117,-65,119,-66,-117,64,14,97,-32,63,27,47,101,64,113,61,-126,-64,-73,-65,-1,-65,103,61,-102,-65,-61,-11,-128,64,31,-83,75,-64,-70,73,4,-64,12,2,-117,-65,-27,32,11,-64,31,-123,91,-64,20,-82,119,-64,-14,-46,117,-64,-21,81,24,-64,-35,36,-78,-65,102,102,94,-64,104,-111,13,64,6,-127,-59,63,24,47,-107,-64,-37,-7,118,64,66,96,-107,63,82,-72,126,63,80,101,-125,-66,2,43,-9,63,66,96,37,64,-121,22,121,64,86,14,45,63,-119,65,-64,-65,-115,-105,94,-64,-119,65,-48,63,47,-9,-109,-65,-9,-124,107,-64,61,10,119,-64,-98,-17,119,-64,-33,79,45,-65,-72,30,-123,-67,12,2,-101,-64,-20,81,32,-64,21,-82,71,-65,-6,126,-110,-64,-90,-101,84,-64,113,61,74,63,-90,-101,92,-64,-104,90,10,-64,33,-16,115,-66,73,38,105,-64,113,61,126,-64,-102,-103,65,-64,-4,-87,57,64,-90,-101,124,-64,-49,-9,11,64,92,-118,-110,-64,-12,-85,-52,-65,123,-6,70,-64,-55,118,22,64,-31,122,-128,-64,57,-76,8,64,-59,72,-116,64,125,63,-123,-64,-84,28,106,64,-121,22,41,-64,-74,-13,125,-64,53,94,-86,63,54,51,-101,64,-41,-93,96,64,78,98,0,64,100,59,119,-64,-68,116,-109,60,49,8,-112,64,-76,-56,-74,62,-42,71,-31,62,68,-117,116,-64,0,0,32,64,10,-41,-45,-65,88,57,-108,-64,2,43,47,-64,-31,82,124,-64,33,-80,122,-64,-72,30,-115,-64,27,47,125,64,-57,75,95,64,-37,-7,94,-65,49,8,-116,64,61,10,71,-64,33,-80,-126,63,84,-29,-11,-65,-106,67,-121,64,-70,73,-112,64,108,-25,115,64,-72,30,-75,63,-94,69,-90,-66,27,47,117,-64,-90,-101,28,64,-115,-53,-124,-64,-39,-50,23,64,88,57,44,-64,-76,-56,54,64,117,-109,96,64,-111,-19,20,64,125,63,-71,-65,37,6,-111,-65,10,-41,-125,64,-41,-93,112,-64,18,-125,104,-64,-70,73,36,64,6,-127,61,64,-117,108,-97,64,109,-25,-101,64,115,104,-127,64,-94,69,-10,63,-12,-3,116,64,-84,28,34,64,-25,-5,25,64,-8,83,-29,-66,102,102,70,63,-111,-19,-104,64,55,-119,-127,-65,-82,71,105,-64,76,55,-124,64,-113,-36,12,-64,-82,71,49,64,57,-76,-104,-65,-113,-62,-107,-64,31,-123,91,-64,41,92,127,-64,-71,73,44,64,-18,124,-113,-65,90,59,95,62,35,-37,-103,63,-88,-58,35,64,90,100,123,64,84,-29,-75,63,121,-23,-42,63,92,-113,-62,63,-10,40,92,-65,94,-70,73,-64,47,-35,4,-65,-2,-64,-112,-64,35,-37,81,-64,-4,-87,97,64,0,-128,-99,-65,-8,83,-13,63,-45,77,31,64,25,4,118,-64,30,-80,98,-64,125,63,-116,64,123,20,-126,-64,29,90,-28,62,119,-66,15,64,67,-35,-104,-64,4,86,-50,-66,110,18,-125,60,119,-66,-109,-64,-76,-56,110,-64,-49,-9,3,-64,101,-39,102,-64,104,-111,125,64,-31,122,20,-65,63,53,-50,63,-37,-7,94,-64,8,-84,-120,-64,-37,-7,70,-64,125,63,-119,64,82,-72,-98,-65,53,94,90,64,-68,116,91,64,-29,-91,27,63,10,-41,-121,64,92,-113,-126,62,86,14,21,64,-98,-17,-125,64,-51,-52,28,-64,-117,108,39,64,-64,-54,-31,62,-33,79,61,64,-82,71,-107,-64,-104,110,26,64,-45,77,-46,-65,8,-84,100,-64,-58,-72,-13,-66,-88,-58,-21,-65,-123,107,79,-65,-94,69,-74,62,46,51,115,-65,-57,34,51,64,6,-127,117,64,-127,-107,51,-64,2,59,102,63,-127,-107,35,-65,26,-127,61,64,33,-80,82,-64,-33,79,-99,-65,-92,112,-19,-65,75,-119,105,-64,66,96,93,64,-25,-5,33,64,111,18,75,64,-88,-110,-83,-65,16,68,-107,64,-37,-7,126,63,17,39,41,-64,96,-27,96,-64,23,-39,-50,-67,-47,34,-97,64,-70,73,-36,-65,33,-80,-122,64,-35,36,-106,-64,-14,-46,-119,-64,-24,-57,27,-64,104,-111,69,64,-127,-107,91,-64,-87,34,59,-64,121,-49,-101,64,102,-26,-8,63,115,114,33,-64,6,-127,-75,63,57,-76,56,-64,-98,-17,-89,-66,90,100,43,-64,111,18,11,-64,-117,108,23,-64,-88,-58,-109,-64,94,-70,109,-64,-78,-99,55,-64,-41,22,81,-64,113,61,122,64,-44,-54,-127,63,-23,28,-95,63,-25,-85,121,64,4,86,46,63,20,-82,47,-64,2,-21,109,-64,33,-80,10,64,100,59,-65,-65,-53,-95,37,64,45,-78,-111,-64,-36,-60,-126,64,18,-125,54,-65,-18,124,31,64,61,10,63,64,111,-8,107,64,-74,-13,-127,64,25,4,-98,-64,-127,-107,19,64,-53,-95,21,64,-121,22,121,64,-8,83,-93,-65,26,73,12,-65,16,88,-99,64,43,-121,38,-64,100,59,-81,-65,-64,-54,121,64,25,4,24,-64,-41,-93,-104,-64,-29,-91,-69,-65,-2,-44,-8,-66,108,-25,-5,62,-51,-52,-52,-65,-104,67,-121,-64,-84,28,26,-65,-115,-105,-126,64,39,9,-116,64,2,43,63,-64,55,-119,25,-64,35,-89,-121,64,-49,-9,115,63,-51,-52,-116,64,-29,-91,83,64,-76,-56,-58,63,13,45,-14,63,66,96,-91,63,125};

//const PROGMEM char neuralnetwork_data[753]={3,0,0,0,4,0,0,0,20,0,0,0,4,0,0,0,57,-76,-52,64,-31,122,-60,64,125,63,-91,-65,-123,-21,-35,-64,63,53,-22,-64,-25,-5,9,65,31,-123,107,63,72,-31,-42,64,-49,-9,21,-63,-123,-21,-59,64,-57,75,21,65,-100,-60,32,62,-111,-19,-124,64,94,-70,11,-63,-119,65,0,64,-31,122,-84,64,-86,-15,-94,63,-53,-95,29,-63,104,-111,-19,60,-86,-15,-14,63,-63,-54,-103,64,51,51,3,-63,66,96,-11,64,-90,-101,68,64,-100,-60,56,-64,-2,-44,-72,62,80,-115,11,-63,-31,122,-16,-64,-102,-103,1,-64,-66,-97,2,64,-53,-95,85,-64,-109,24,-76,-64,-86,-15,-82,-64,8,-84,-36,63,49,8,36,-64,113,61,50,-64,51,51,83,-64,82,-72,-106,64,113,61,-62,-64,111,18,43,-64,-72,30,101,63,-39,-50,25,65,6,-127,117,64,-127,-107,9,-63,109,-25,17,-63,-121,22,-123,-64,-33,79,-39,64,100,59,-65,-65,-121,22,-11,-64,-6,126,-38,-64,31,-123,25,-63,57,-76,-28,64,96,-27,-96,-64,-102,-103,-115,64,-119,65,96,62,-92,112,5,64,-63,-54,13,-63,-78,-99,-65,63,49,8,108,63,111,18,99,-65,-119,65,30,65,82,-72,-14,64,84,-29,37,-66,-127,-107,19,-63,23,-39,-118,-64,-59,32,104,64,117,-109,0,-64,-96,26,23,64,47,-35,-44,-65,25,4,-10,63,-82,71,-63,64,33,-80,-78,64,100,59,7,-64,-74,-13,-3,-67,104,-111,85,64,-10,40,-100,-64,127,106,4,64,-109,24,4,62,-59,32,104,64,-72,30,-115,64,-4,-87,-79,-66,-90,-101,-60,62,-57,75,-57,63,53,94,122,63,-117,108,13,-63,74,12,2,65,-41,-93,22,65,-104,110,-10,-64,57,-76,-128,-64,86,14,-83,62,106,-68,-76,63,-111,-19,-8,-64,51,51,-73,-64,-106,67,-13,64,-109,24,-32,-64,111,18,-125,-67,-92,112,-99,63,27,47,125,63,78,98,10,65,115,104,-67,64,63,53,20,65,74,12,-106,64,18,-125,-64,63,102,102,54,-64,-8,83,17,-63,-121,22,-91,-64,16,88,17,64,2,43,63,64,76,55,-87,63,0,0,-8,-64,49,8,-56,-64,78,98,16,-63,117,-109,40,64,29,90,-44,63,-2,-44,-40,-65,43,-121,22,62,-84,28,90,-66,35,-37,17,-64,68,-117,28,64,-31,122,-72,64,-86,-15,0,65,-41,-93,28,-63,-27,-48,-118,64,-37,-7,10,65,25,4,-6,64,-125,-64,-22,64,78,98,-80,-65,-12,-3,116,-65,102,102,-42,-65,-16,-89,46,-64,76,55,-95,-64,-123,-21,-63,-64,-12,-3,4,65,29,90,52,64,31,-123,-117,63,20,-82,19,65,78,98,-128,64,115,104,27,65,2,43,-73,-65,-33,79,-107,-64,-115,-105,0,-63,29,90,20,64,-27,-48,-22,-64,-86,-15,114,63,106,-68,26,-63,-39,-50,119,63,-55,118,14,-63,-78,-99,-17,61,61,10,11,65,-121,22,-39,-67,18,-125,-8,-64,-55,118,70,64,61,10,-41,61,4,86,-46,64,47,-35,-28,63,41,92,-73,-64,14,45,122,64,78,98,-40,64,49,8,84,64,66,96,9,65,-14,-46,25,-63,98,16,-108,64,2,43,-17,-64,2,43,11,65,-55,118,-58,-64,111,18,3,-67,-61,-11,-120,64,-123,-21,-7,64,-27,-48,-94,-66,-2,-44,-28,-64,90,100,-37,-64,39,49,0,-64,92,-113,-62,63,121,-23,-6,-64,104,-111,-87,64,8,-84,-20,63,66,96,5,-65,-39,-50,47,64,-121,22,5,65,53,94,-22,-65,-68,116,-21,-64,-23,38,23,-63,-98,-17,-13,64,-16,-89,102,-65,125};

MachineLearning machine;
unsigned char memoire[] = {0,0};
unsigned char data[] = {0,0,0,0};
double rotation = 0;
double distance = 0;

unsigned long start_chrono = 0;
int speed_l = 0, speed_r = 0;

Servo servo_g, servo_d;

struct Line{
  double x1,y1;
  double x2,y2;
};

//function
double getRotation(double x1, double y1, double x2, double y2){
    double deltaX = x2-x1;
    double deltaY = y1-y2;
    double rotation;
    if(deltaX!=0){
        rotation = atan((double)(deltaY)/deltaX);
    }else{
        //h n'est jamais nul ici
        double h = sqrt(deltaX*deltaX+deltaY*deltaY);
        rotation = asin((double)(deltaY)/h);
    }

    if(deltaX<0){
        rotation+=PI;
    }

    if(rotation<0) rotation+=2*PI;
    
    return rotation;
}

void goTo(double angle, double &rotation, int &speed_r, int &speed_l, bool sens=false){
  //si la différence est de plus de 5 degres, on fait tout bouger
  if(int(abs(angle-rotation)/PI*180.0)%360>5){
    speed_r = (sens)?100.0:-100.0;
    speed_l = (sens)?-100.0:100.0;
  }else{
    speed_r = 0;
    speed_l = 0;
  }
}

Line setRotation(double rotation){
    Line line;
    //on place le baton
    line.x1 =(0+RAYON_BASE*cos(M_PI+rotation));
    line.y1 = (0-RAYON_BASE*sin(M_PI+rotation));
    line.x2 = (0+RAYON_BASE*cos(rotation));
    line.y2 = (0-RAYON_BASE*sin(rotation));
    return line;
}

double getDistance(int pin, int timeout){
  pinMode(pin, OUTPUT);
  digitalWrite(pin, HIGH);
  delayMicroseconds(5);
  digitalWrite(pin, LOW);
  pinMode(pin, INPUT);
  double duration = (double)pulseIn(pin, HIGH, timeout);
  if(duration==0){
    duration = timeout;
  }

  double distance = VITESSE_SON*100.0*duration/1000000.0;
  return distance/2.0;
}

void updateRotation(double &rotation, double speed_l, double speed_r, unsigned long tm){
    //intégration de la vitesse de la roue pour trouver l'angle de rotation

    //modif sur la vitesse pour qu'elle soit angulaire
    speed_r = speed_r/100.0*FULL_SPEED/RAYON_BASE;
    speed_l = speed_l/100.0*FULL_SPEED/RAYON_BASE;

    //on tourne autour de la roue gaguche
    double angle = rotation;
    Line line = setRotation(angle);

    if(speed_r!=0){
        angle+=speed_r*double(tm)/1000.0;
        line.x2 = line.x1+2.0*RAYON_BASE*cos(angle);
        line.y2 = line.y1-2.0*RAYON_BASE*sin(angle);
    }

    if(speed_l!=0){
        angle-=speed_l*double(tm)/1000.0;
        line.x1 = line.x2+2.0*RAYON_BASE*cos(M_PI+angle);
        line.y1 = line.y2-2.0*RAYON_BASE*sin(M_PI+angle);
    }
    
    //on enregistre la rotation
    rotation = getRotation(line.x1,line.y1,line.x2,line.y2);
}

void setSpeed(Servo &servo, int vitesse){
  servo.writeMicroseconds(map(vitesse, -100, 100, 1300, 1700));
}
//main

void setup() {
  srand(analogRead(0));
  Serial.begin(9600);

  std::cout << "Construction du model" << std::endl;
  //neural network
  machine.open(4);
  machine.addColumn(20);
  //machine.addColumn(20);
  machine.addColumn(4);

  //on charge le réseau de neurones
  machine.backupTraining(neuralnetwork_data);
  std::cout << "Reseau de neurones chargé." << std::endl;

  //on gère les servommoteurs
  servo_g.attach(SERVO_G_PIN);
  servo_d.attach(SERVO_D_PIN);
  pinMode(CAPTEUR_US, OUTPUT);
  digitalWrite(CAPTEUR_US, LOW);
  delay(100);
}

void loop() {
  unsigned long tm = millis()-start_chrono;
  start_chrono = millis();
  updateRotation(rotation,speed_l,speed_r, tm);


  std::cout << "fps:" << 1000.0/(double)tm << std::endl;
  std::cout << "rotation:" << rotation/PI*180.0 << std::endl;
  //on doit maintenir la loop a une certaine fréquence
  distance = getDistance(CAPTEUR_US, TIMEOUT) * FACTEUR_DISTANCE;
  if(distance>DIST_MAX) distance = DIST_MAX;
  //Serial.println("distance:"+String(distance)+"cm");
  
  //info réel
  data[0] = (unsigned char)(int(double(int(rotation)%360)/360.0*255.0));
  data[1] = (unsigned char)(int(distance/DIST_MAX*255.0));

  //info de memoire
  memcpy((char*)(data+2), memoire, 2);
  
  //on donne les infos au réseau de neurones
  machine.setInput((char*)data);
  machine.calcul();
  
  //on remplit la mémoire pour prochain passage
  memoire[0] = (unsigned char)machine.getOutput(2);
  memoire[1] = (unsigned char)machine.getOutput(3);
  
  //std::cout << "Motor1:" << machine.getOutput(0) << std::endl;
  //std::cout << "Motor2:" << machine.getOutput(1) << std::endl;

  //on envoie les infos moteur
  //speed_l = int((machine.getOutput(0)-0.5)*2.0*100.0);
  //speed_r = int((machine.getOutput(1)-0.5)*2.0*100.0);

  goTo(270.0/180.0*PI, rotation, speed_l, speed_r);
  
  setSpeed(servo_g, speed_l+G_CORREC);
  setSpeed(servo_d, -speed_r+D_CORREC);


  //on gère la fréquence de rafraichissement
  unsigned long duration = millis()-start_chrono;
  if(double(duration)<1000.0/FPS){
    delay(int(1000.0/FPS-double(duration)));
  }
}
