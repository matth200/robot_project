#include "src/m_learning.h"
#include <ArduinoSTL.h>
#define DIST_MAX 315
#define FPS 40.0


#define NO_INFORMATION

#include <Servo.h>

#define SERVO_G_PIN 9
#define SERVO_D_PIN 8
#define G_CORREC -14
#define D_CORREC 8

#define CAPTEUR_US 10
#define TIMEOUT 18500
#define VITESSE_SON 340.0

#define RAYON_BASE 8.0
#define FULL_SPEED 11.5
#define FACTEUR_DISTANCE 1

//test 20 20
//const PROGMEM char neuralnetwork_data[2437]={4,0,0,0,4,0,0,0,20,0,0,0,20,0,0,0,4,0,0,0,-106,67,-73,-64,-109,24,124,64,-25,-5,13,-63,-113,-52,-43,63,49,8,-36,63,39,49,-44,64,-88,-58,19,65,29,90,76,63,-26,-74,115,-66,39,49,-88,64,104,-111,-7,-64,57,-76,120,-64,-9,-9,13,65,41,92,23,-64,-41,-103,-120,64,36,92,-5,-64,-35,36,-10,-65,121,-23,70,-64,37,6,121,64,113,61,6,65,-4,-87,105,-64,-77,58,59,64,55,-119,19,65,-93,-35,13,-63,-63,-54,9,64,94,-70,25,64,-84,-15,82,64,-47,34,21,-63,8,-84,116,62,-33,79,-7,-64,106,-68,124,64,2,43,103,63,-100,-60,-60,64,-16,-89,-74,63,-27,-48,29,65,-80,114,8,-64,-80,114,-8,-65,-80,114,-112,64,-127,53,-100,64,-94,69,-6,64,21,-123,107,-66,-86,11,-30,64,115,104,7,-63,-59,32,-96,-64,27,47,15,-63,35,-42,-71,64,-37,-7,54,-64,-41,-93,-112,-64,-102,-103,-23,-64,-70,73,-20,64,-59,32,-60,-64,51,51,115,-65,53,53,-98,62,-96,26,23,65,45,-78,93,-64,-123,5,13,65,43,-121,-26,-65,-8,83,29,65,109,-25,23,65,43,-41,-102,64,-16,-89,-2,-64,-123,-101,81,-66,117,-109,-120,-64,66,96,-111,64,-104,110,12,-63,10,-41,15,-63,63,53,12,65,-39,-60,55,-65,-59,32,-16,63,98,16,104,64,-92,112,-47,-64,-49,-9,-1,64,-33,79,61,-64,-31,122,10,-63,-10,40,-32,-64,-113,-62,-79,-64,96,-27,-28,64,-104,67,11,62,-102,-103,-103,-67,92,-113,-58,64,51,25,-60,-64,16,-116,23,62,-70,73,6,-63,-63,-54,-123,64,-113,-62,-127,-64,104,-111,-19,-65,2,-85,41,-65,-90,-101,-124,64,-43,120,-35,-64,29,85,-108,-65,-68,116,-125,-65,47,-35,-24,-64,-55,118,-82,-65,-57,75,-121,63,-78,-99,103,64,-76,-56,-58,64,29,90,-108,64,104,-111,-127,64,-49,71,-124,-64,88,57,-76,62,106,-68,20,63,92,-113,-42,64,-74,-13,24,-64,115,104,-15,64,-18,124,-65,-66,-90,-101,52,-64,112,61,-54,-64,66,-68,36,-64,-78,-99,47,-64,40,92,-97,-65,-85,-58,43,63,113,61,-122,64,-98,-17,-9,64,113,61,18,-63,20,-82,95,64,-16,-89,-38,64,125,63,15,-63,0,0,-68,-64,94,-70,73,63,-113,-94,-49,64,-115,-105,-82,-65,-92,112,-75,-64,-121,22,-43,63,-73,-54,-83,64,-121,22,-31,64,-76,-56,8,-63,-88,-58,-81,-64,-43,120,-43,64,0,0,-80,64,70,28,-57,62,-106,67,-1,-64,-84,28,-14,-64,-46,77,58,-64,-73,-13,93,-64,-29,-91,31,65,117,19,-26,63,-74,-13,125,61,-86,-15,-49,-64,56,-119,1,65,72,-31,106,64,43,0,-98,-65,-14,-46,-99,-65,86,14,-71,-64,-96,26,95,-64,74,12,26,65,123,20,-126,64,27,47,27,65,50,-35,-32,64,61,10,3,65,-45,77,74,-64,125,63,93,64,-39,77,-38,-64,-113,-62,-107,63,-123,-21,5,-63,119,-66,9,65,84,-29,-27,-65,115,104,-30,-64,-70,73,-36,-64,0,0,30,65,84,-29,-119,64,80,-115,23,-66,0,0,4,65,-88,-58,-21,64,-125,-64,82,64,-37,-7,-30,-64,8,-84,108,64,-80,114,-100,-64,-121,22,-103,63,-33,79,109,64,-86,-15,24,65,-119,65,-92,-64,47,-35,-16,-64,-94,69,-42,-65,-6,126,96,-65,-23,38,-107,-64,63,53,-74,-64,25,4,24,65,119,-66,9,-63,-69,-13,-11,64,-84,28,-10,64,92,-113,-30,-65,-25,77,-110,63,-109,24,18,-63,-51,-52,-116,64,119,-66,95,-65,92,-113,-70,64,-82,71,25,-64,-80,114,-72,-65,104,-111,-87,64,-82,71,33,-64,79,96,-91,62,-10,53,-51,-64,55,62,-127,-64,14,45,22,-63,-10,40,2,-63,-70,73,-4,64,-96,23,22,65,52,-113,2,-66,64,-67,-15,-64,70,102,-105,64,51,51,-77,-64,-20,38,27,65,24,45,-118,64,117,-109,-40,63,1,-4,107,-64,104,17,-85,-64,-72,30,18,-64,-23,44,95,-64,41,-4,71,64,29,90,-32,64,119,-66,79,-64,6,-127,-43,-64,6,-127,-27,63,33,-80,4,-63,63,48,14,64,-88,-58,-73,64,16,88,-127,64,37,6,105,64,-80,114,-60,64,-90,114,24,64,16,-127,23,-63,-12,-3,8,-63,4,86,16,65,-84,28,20,-63,-69,-12,21,60,55,-78,-19,63,-106,67,-5,-64,25,4,30,65,-98,-17,-25,64,33,-80,-102,64,-53,38,20,-63,-20,81,-40,63,82,-72,-62,64,-123,-21,19,-63,-63,-54,-83,-64,-117,108,7,63,-45,77,2,-64,-80,114,-48,-64,111,18,-89,64,-45,77,98,64,-16,-89,86,-64,25,4,110,64,119,-66,-53,64,16,88,-103,64,70,-74,-29,63,84,-29,-95,-64,-61,-11,8,63,94,-70,-123,-64,-33,79,9,65,-71,-52,84,-64,61,62,3,65,72,-31,-82,64,72,-31,-114,64,-111,-19,100,64,-16,-89,-58,64,2,43,-113,64,-84,28,-110,-64,-16,-89,-106,64,51,51,-117,64,68,-117,16,65,-6,-125,-22,-66,-94,69,-74,63,-87,34,59,-64,-20,81,0,-63,-68,116,11,64,92,-113,-26,63,117,-109,32,64,10,-46,-49,64,-84,-13,-67,63,66,96,-67,-64,-18,124,103,-64,123,20,2,65,-111,21,-123,64,-53,-95,17,65,12,2,59,64,-35,100,-125,-64,-66,-97,-66,-64,-61,-11,28,65,-104,110,-14,-65,0,0,-20,-64,76,55,-27,-64,23,-39,-22,-64,-35,36,-114,64,111,18,-53,-64,-78,-99,-57,64,59,-33,63,-64,91,100,-113,64,125,63,5,-63,-41,-93,4,-63,-35,36,-102,-64,35,-37,-31,64,78,98,-96,63,-117,108,-45,64,70,-74,-69,-64,121,-87,77,64,-127,-107,-101,-64,-61,-11,-72,64,28,-2,-4,-64,123,-32,5,-63,-96,26,47,-64,111,18,-17,-64,-74,-13,-3,-65,98,16,4,-63,35,-37,-43,64,-127,-107,-53,64,93,-21,3,-63,69,-74,-49,64,-53,-95,69,-64,98,16,-56,64,-41,-123,64,-64,47,-110,76,64,-12,72,29,-64,106,-73,-48,64,-90,-126,-124,63,99,-33,-77,-64,-127,-107,27,65,55,-93,-80,63,16,28,21,65,34,-37,57,63,117,-45,-103,-64,86,-64,4,-64,39,49,-56,63,-61,-11,-44,-64,-84,-36,-96,-64,86,57,20,-63,49,8,-68,-65,-17,-108,28,-63,-66,-54,-7,64,4,11,46,63,14,45,-102,64,123,20,-18,62,18,-84,-52,64,-125,-64,34,-64,-43,120,105,-67,-58,32,-16,-65,-29,67,29,-63,37,95,-34,-64,60,-2,-114,64,33,-80,58,-64,33,-39,20,65,-16,-99,-2,64,-59,-86,-122,64,41,49,40,-65,91,75,-113,64,92,-72,-102,-64,54,-28,27,-64,53,94,122,62,110,104,57,64,84,-29,69,-64,-67,-97,11,-63,-69,21,2,65,-16,7,-106,63,-53,-55,-71,-64,100,59,17,65,-97,-125,-100,63,-10,40,76,-64,-120,22,25,-64,33,-80,-14,63,-70,83,-24,-64,18,-125,-128,64,-51,16,-71,-64,84,-29,-111,64,-81,-38,-44,63,-43,120,65,64,49,8,24,65,80,-19,-74,-64,-11,122,81,64,18,79,-18,-64,-74,-13,-3,-66,123,20,18,65,76,55,73,-64,-104,110,34,-64,-20,76,-82,64,4,86,-98,-64,113,41,-38,-65,-101,-103,-67,64,97,16,40,64,-43,-72,-102,-64,-16,-89,-116,-65,78,98,-68,64,-23,38,-27,-64,113,61,-42,-64,33,-80,-46,-64,-102,90,2,64,-18,124,-17,64,-59,32,-108,64,31,51,5,65,72,49,9,-63,-73,102,94,-64,35,-37,-111,-64,-125,-64,-82,64,5,11,6,64,-25,-5,21,-63,-100,-60,-8,-64,108,79,-100,-64,41,52,-39,64,21,73,-18,64,27,47,-107,64,29,90,-94,64,-20,-71,89,-64,-4,-128,-71,63,102,-44,10,65,98,16,-40,-65,-43,-93,4,-63,27,-5,-30,64,121,-23,-22,64,116,124,-47,64,39,8,18,-63,-51,-31,-58,-65,13,-98,-47,64,-89,115,-7,64,-23,38,113,64,5,81,-66,64,-30,96,1,65,86,62,2,-63,104,86,-114,-66,-71,-52,60,64,-125,57,-125,64,115,-72,1,65,10,-41,-93,-66,77,6,-127,-66,-55,118,-30,64,7,-13,89,-64,-4,117,19,-63,-121,3,-48,-65,-73,-13,57,64,23,-39,126,64,43,7,12,-63,-115,24,-40,64,19,85,19,-63,-110,92,-59,63,-22,-42,-128,-65,16,-62,-27,-64,-84,28,4,-63,-7,34,-66,-64,119,10,-113,-64,3,-39,-38,64,2,91,-103,-65,123,-12,-97,-64,-88,70,-119,-64,-18,114,55,-64,-121,22,18,-63,-86,-15,-42,64,49,72,109,-65,121,-23,-78,64,117,86,-68,-64,-119,60,24,-63,-2,-64,-118,-64,-45,97,-10,-64,-21,-4,-52,63,-27,-48,-62,63,-16,-115,-41,-65,-67,7,30,65,81,-78,-26,-64,-122,-103,69,-64,-10,20,4,-64,63,53,-34,63,-112,21,-36,-64,59,-13,-109,-64,115,-56,-104,-65,43,-121,28,-63,-23,-58,81,64,-53,79,28,65,-66,-97,-102,64,-47,103,-84,63,37,-58,-69,64,43,53,-74,-64,110,104,17,-63,-112,-103,33,-64,113,14,-64,64,-61,-11,-24,-64,19,-82,27,65,109,-25,19,-63,71,-123,-5,63,-41,-93,-80,-65,-70,73,-72,-64,101,16,-60,-64,59,-33,3,65,121,-23,-34,-64,12,2,59,64,-37,-7,-66,-66,69,-25,-1,64,8,-84,-80,-64,12,2,35,64,39,49,96,-64,-18,124,15,-64,-102,-103,31,-63,-16,-89,-18,64,76,55,65,-64,-10,40,-36,-65,113,61,20,65,-122,-103,-119,-64,72,-31,98,64,-98,-17,-17,64,115,40,-68,64,-88,-58,-101,63,16,88,-103,-67,-119,65,96,-66,-53,-95,-7,-64,-102,71,5,65,72,-31,-54,63,109,-25,23,-63,123,20,-98,64,41,82,47,-64,115,104,-31,-65,74,12,-50,-64,-109,65,-64,63,-80,-101,-60,-65,-31,122,2,65,-8,83,99,63,-29,-91,-1,-64,84,-29,13,-64,82,-112,-114,-65,37,6,-7,-64,-14,-56,-43,64,88,97,-84,64,13,2,107,-64,-66,-87,-42,64,23,89,81,-65,-88,-58,103,64,127,106,-96,-64,-84,28,-90,-64,80,-115,-85,64,-20,81,-100,64,-35,36,-10,-64,-49,-9,-93,63,-43,125,121,-64,-123,-21,9,64,2,2,15,-63,106,108,60,-64,-21,81,-8,62,98,16,16,-64,121,-23,-102,-64,80,-115,3,-63,-70,73,-56,64,3,-6,126,-66,-23,38,-107,-64,78,98,-68,-64,-31,122,-28,-65,55,-119,29,65,49,8,-96,64,43,-121,-66,64,-9,-64,23,-64,14,45,28,-63,-125,-64,2,65,25,4,-74,-64,-121,22,57,63,53,94,18,-63,59,-33,-21,64,16,24,12,-63,-23,38,-123,64,66,96,11,65,-51,-52,-128,-64,88,57,-12,-66,-35,36,102,64,72,-57,-37,-65,-12,-3,-28,64,7,43,27,65,8,-2,24,-63,-18,124,3,65,-100,-60,-36,-64,4,86,46,-64,-84,28,50,-64,127,106,-84,-64,-121,22,-71,-65,59,-33,9,65,-80,-116,-105,-67,80,-115,79,-64,-106,67,48,64,125,63,-47,64,123,20,-26,-64,113,61,10,63,-90,-101,36,63,20,-77,-121,62,63,53,-62,64,-66,-97,8,65,-118,-82,69,-64,-37,-87,54,-64,-112,-37,-59,60,125,63,-15,-64,-128,-70,-100,64,57,4,-55,64,-105,18,9,-63,-12,-3,12,-63,82,-83,-72,64,-119,65,22,65,94,-70,-3,-64,-123,-21,119,64,-10,40,-36,-64,43,-121,-102,64,51,51,3,65,53,-80,-26,-64,88,-103,-85,-64,-88,-58,11,-63,-127,53,-48,-64,-68,-60,-85,-64,98,-112,16,-63,104,-111,-67,-65,12,2,-5,64,-84,28,12,65,-127,-107,9,65,-4,-87,11,-63,-77,-56,54,-65,-49,-9,91,64,125};
//gros brain bien muscl√©
//const PROGMEM char neuralnetwork_data[2437]={4,0,0,0,4,0,0,0,20,0,0,0,20,0,0,0,4,0,0,0,-106,67,-73,-64,-109,24,124,64,-25,-5,13,-63,-113,-52,-43,63,49,8,-36,63,39,49,-44,64,-88,-58,19,65,29,90,76,63,-26,-74,115,-66,39,49,-88,64,104,-111,-7,-64,57,-76,120,-64,-9,-9,13,65,41,92,23,-64,-41,-103,-120,64,36,92,-5,-64,-35,36,-10,-65,121,-23,70,-64,37,6,121,64,113,61,6,65,-4,-87,105,-64,-77,58,59,64,55,-119,19,65,-93,-35,13,-63,-63,-54,9,64,94,-70,25,64,-84,-15,82,64,-47,34,21,-63,8,-84,116,62,-33,79,-7,-64,106,-68,124,64,2,43,103,63,-100,-60,-60,64,-16,-89,-74,63,-27,-48,29,65,-80,114,8,-64,-80,114,-8,-65,-80,114,-112,64,-127,53,-100,64,-94,69,-6,64,21,-123,107,-66,-86,11,-30,64,115,104,7,-63,-59,32,-96,-64,27,47,15,-63,35,-42,-71,64,-37,-7,54,-64,-41,-93,-112,-64,-102,-103,-23,-64,-70,73,-20,64,-59,32,-60,-64,51,51,115,-65,53,53,-98,62,-96,26,23,65,45,-78,93,-64,-123,5,13,65,43,-121,-26,-65,-8,83,29,65,109,-25,23,65,43,-41,-102,64,-16,-89,-2,-64,-123,-101,81,-66,117,-109,-120,-64,66,96,-111,64,-104,110,12,-63,10,-41,15,-63,63,53,12,65,-39,-60,55,-65,-59,32,-16,63,98,16,104,64,-92,112,-47,-64,-49,-9,-1,64,-33,79,61,-64,-31,122,10,-63,-10,40,-32,-64,-113,-62,-79,-64,96,-27,-28,64,-104,67,11,62,-102,-103,-103,-67,92,-113,-58,64,51,25,-60,-64,16,-116,23,62,-70,73,6,-63,-63,-54,-123,64,-113,-62,-127,-64,104,-111,-19,-65,2,-85,41,-65,-90,-101,-124,64,-43,120,-35,-64,29,85,-108,-65,-68,116,-125,-65,47,-35,-24,-64,-55,118,-82,-65,-57,75,-121,63,-78,-99,103,64,-76,-56,-58,64,29,90,-108,64,104,-111,-127,64,-49,71,-124,-64,88,57,-76,62,106,-68,20,63,92,-113,-42,64,-74,-13,24,-64,115,104,-15,64,-18,124,-65,-66,-90,-101,52,-64,112,61,-54,-64,66,-68,36,-64,-78,-99,47,-64,40,92,-97,-65,-85,-58,43,63,113,61,-122,64,-98,-17,-9,64,113,61,18,-63,20,-82,95,64,-16,-89,-38,64,125,63,15,-63,0,0,-68,-64,94,-70,73,63,-113,-94,-49,64,-115,-105,-82,-65,-92,112,-75,-64,-121,22,-43,63,-73,-54,-83,64,-121,22,-31,64,-76,-56,8,-63,-88,-58,-81,-64,-43,120,-43,64,0,0,-80,64,70,28,-57,62,-106,67,-1,-64,-84,28,-14,-64,-46,77,58,-64,-73,-13,93,-64,-29,-91,31,65,117,19,-26,63,-74,-13,125,61,-86,-15,-49,-64,56,-119,1,65,72,-31,106,64,43,0,-98,-65,-14,-46,-99,-65,86,14,-71,-64,-96,26,95,-64,74,12,26,65,123,20,-126,64,27,47,27,65,50,-35,-32,64,61,10,3,65,-45,77,74,-64,125,63,93,64,-39,77,-38,-64,-113,-62,-107,63,-123,-21,5,-63,119,-66,9,65,84,-29,-27,-65,115,104,-30,-64,-70,73,-36,-64,0,0,30,65,84,-29,-119,64,80,-115,23,-66,0,0,4,65,-88,-58,-21,64,-125,-64,82,64,-37,-7,-30,-64,8,-84,108,64,-80,114,-100,-64,-121,22,-103,63,-33,79,109,64,-86,-15,24,65,-119,65,-92,-64,47,-35,-16,-64,-94,69,-42,-65,-6,126,96,-65,-23,38,-107,-64,63,53,-74,-64,25,4,24,65,119,-66,9,-63,-69,-13,-11,64,-84,28,-10,64,92,-113,-30,-65,-25,77,-110,63,-109,24,18,-63,-51,-52,-116,64,119,-66,95,-65,92,-113,-70,64,-82,71,25,-64,-80,114,-72,-65,104,-111,-87,64,-82,71,33,-64,79,96,-91,62,-10,53,-51,-64,55,62,-127,-64,14,45,22,-63,-10,40,2,-63,-70,73,-4,64,-96,23,22,65,52,-113,2,-66,64,-67,-15,-64,70,102,-105,64,51,51,-77,-64,-20,38,27,65,24,45,-118,64,117,-109,-40,63,1,-4,107,-64,104,17,-85,-64,-72,30,18,-64,-23,44,95,-64,41,-4,71,64,29,90,-32,64,119,-66,79,-64,6,-127,-43,-64,6,-127,-27,63,33,-80,4,-63,63,48,14,64,-88,-58,-73,64,16,88,-127,64,37,6,105,64,-80,114,-60,64,-90,114,24,64,16,-127,23,-63,-12,-3,8,-63,4,86,16,65,-84,28,20,-63,-69,-12,21,60,55,-78,-19,63,-106,67,-5,-64,25,4,30,65,-98,-17,-25,64,33,-80,-102,64,-53,38,20,-63,-20,81,-40,63,82,-72,-62,64,-123,-21,19,-63,-63,-54,-83,-64,-117,108,7,63,-45,77,2,-64,-80,114,-48,-64,111,18,-89,64,-45,77,98,64,-16,-89,86,-64,25,4,110,64,119,-66,-53,64,16,88,-103,64,70,-74,-29,63,84,-29,-95,-64,-61,-11,8,63,94,-70,-123,-64,-33,79,9,65,-71,-52,84,-64,61,62,3,65,72,-31,-82,64,72,-31,-114,64,-111,-19,100,64,-16,-89,-58,64,2,43,-113,64,-84,28,-110,-64,-16,-89,-106,64,51,51,-117,64,68,-117,16,65,-6,-125,-22,-66,-94,69,-74,63,-87,34,59,-64,-20,81,0,-63,-68,116,11,64,92,-113,-26,63,117,-109,32,64,10,-46,-49,64,-84,-13,-67,63,66,96,-67,-64,-18,124,103,-64,123,20,2,65,-111,21,-123,64,-53,-95,17,65,12,2,59,64,-35,100,-125,-64,-66,-97,-66,-64,-61,-11,28,65,-104,110,-14,-65,0,0,-20,-64,76,55,-27,-64,23,-39,-22,-64,-35,36,-114,64,111,18,-53,-64,-78,-99,-57,64,59,-33,63,-64,91,100,-113,64,125,63,5,-63,-41,-93,4,-63,-35,36,-102,-64,35,-37,-31,64,78,98,-96,63,-117,108,-45,64,70,-74,-69,-64,121,-87,77,64,-127,-107,-101,-64,-61,-11,-72,64,28,-2,-4,-64,123,-32,5,-63,-96,26,47,-64,111,18,-17,-64,-74,-13,-3,-65,98,16,4,-63,35,-37,-43,64,-127,-107,-53,64,93,-21,3,-63,69,-74,-49,64,-53,-95,69,-64,98,16,-56,64,-41,-123,64,-64,47,-110,76,64,-12,72,29,-64,106,-73,-48,64,-90,-126,-124,63,99,-33,-77,-64,-127,-107,27,65,55,-93,-80,63,16,28,21,65,34,-37,57,63,117,-45,-103,-64,86,-64,4,-64,39,49,-56,63,-61,-11,-44,-64,-84,-36,-96,-64,86,57,20,-63,49,8,-68,-65,-17,-108,28,-63,-66,-54,-7,64,4,11,46,63,14,45,-102,64,123,20,-18,62,18,-84,-52,64,-125,-64,34,-64,-43,120,105,-67,-58,32,-16,-65,-29,67,29,-63,37,95,-34,-64,60,-2,-114,64,33,-80,58,-64,33,-39,20,65,-16,-99,-2,64,-59,-86,-122,64,41,49,40,-65,91,75,-113,64,92,-72,-102,-64,54,-28,27,-64,53,94,122,62,110,104,57,64,84,-29,69,-64,-67,-97,11,-63,-69,21,2,65,-16,7,-106,63,-53,-55,-71,-64,100,59,17,65,-97,-125,-100,63,-10,40,76,-64,-120,22,25,-64,33,-80,-14,63,-70,83,-24,-64,18,-125,-128,64,-51,16,-71,-64,84,-29,-111,64,-81,-38,-44,63,-43,120,65,64,49,8,24,65,80,-19,-74,-64,-11,122,81,64,18,79,-18,-64,-74,-13,-3,-66,123,20,18,65,76,55,73,-64,-104,110,34,-64,-20,76,-82,64,4,86,-98,-64,113,41,-38,-65,-101,-103,-67,64,97,16,40,64,-43,-72,-102,-64,-16,-89,-116,-65,78,98,-68,64,-23,38,-27,-64,113,61,-42,-64,33,-80,-46,-64,-102,90,2,64,-18,124,-17,64,-59,32,-108,64,31,51,5,65,72,49,9,-63,-73,102,94,-64,35,-37,-111,-64,-125,-64,-82,64,5,11,6,64,-25,-5,21,-63,-100,-60,-8,-64,108,79,-100,-64,41,52,-39,64,21,73,-18,64,27,47,-107,64,29,90,-94,64,-20,-71,89,-64,-4,-128,-71,63,102,-44,10,65,98,16,-40,-65,-43,-93,4,-63,27,-5,-30,64,121,-23,-22,64,116,124,-47,64,39,8,18,-63,-51,-31,-58,-65,13,-98,-47,64,-89,115,-7,64,-23,38,113,64,5,81,-66,64,-30,96,1,65,86,62,2,-63,104,86,-114,-66,-71,-52,60,64,-125,57,-125,64,115,-72,1,65,10,-41,-93,-66,77,6,-127,-66,-55,118,-30,64,7,-13,89,-64,-4,117,19,-63,-121,3,-48,-65,-73,-13,57,64,23,-39,126,64,43,7,12,-63,-115,24,-40,64,19,85,19,-63,-110,92,-59,63,-22,-42,-128,-65,16,-62,-27,-64,-84,28,4,-63,-7,34,-66,-64,119,10,-113,-64,3,-39,-38,64,2,91,-103,-65,123,-12,-97,-64,-88,70,-119,-64,-18,114,55,-64,-121,22,18,-63,-86,-15,-42,64,49,72,109,-65,121,-23,-78,64,117,86,-68,-64,-119,60,24,-63,-2,-64,-118,-64,-45,97,-10,-64,-21,-4,-52,63,-27,-48,-62,63,-16,-115,-41,-65,-67,7,30,65,81,-78,-26,-64,-122,-103,69,-64,-10,20,4,-64,63,53,-34,63,-112,21,-36,-64,59,-13,-109,-64,115,-56,-104,-65,43,-121,28,-63,-23,-58,81,64,-53,79,28,65,-66,-97,-102,64,-47,103,-84,63,37,-58,-69,64,43,53,-74,-64,110,104,17,-63,-112,-103,33,-64,113,14,-64,64,-61,-11,-24,-64,19,-82,27,65,109,-25,19,-63,71,-123,-5,63,-41,-93,-80,-65,-70,73,-72,-64,101,16,-60,-64,59,-33,3,65,121,-23,-34,-64,12,2,59,64,-37,-7,-66,-66,69,-25,-1,64,8,-84,-80,-64,12,2,35,64,39,49,96,-64,-18,124,15,-64,-102,-103,31,-63,-16,-89,-18,64,76,55,65,-64,-10,40,-36,-65,113,61,20,65,-122,-103,-119,-64,72,-31,98,64,-98,-17,-17,64,115,40,-68,64,-88,-58,-101,63,16,88,-103,-67,-119,65,96,-66,-53,-95,-7,-64,-102,71,5,65,72,-31,-54,63,109,-25,23,-63,123,20,-98,64,41,82,47,-64,115,104,-31,-65,74,12,-50,-64,-109,65,-64,63,-80,-101,-60,-65,-31,122,2,65,-8,83,99,63,-29,-91,-1,-64,84,-29,13,-64,82,-112,-114,-65,37,6,-7,-64,-14,-56,-43,64,88,97,-84,64,13,2,107,-64,-66,-87,-42,64,23,89,81,-65,-88,-58,103,64,127,106,-96,-64,-84,28,-90,-64,80,-115,-85,64,-20,81,-100,64,-35,36,-10,-64,-49,-9,-93,63,-43,125,121,-64,-123,-21,9,64,2,2,15,-63,106,108,60,-64,-21,81,-8,62,98,16,16,-64,121,-23,-102,-64,80,-115,3,-63,-70,73,-56,64,3,-6,126,-66,-23,38,-107,-64,78,98,-68,-64,-31,122,-28,-65,55,-119,29,65,49,8,-96,64,43,-121,-66,64,-9,-64,23,-64,14,45,28,-63,-125,-64,2,65,25,4,-74,-64,-121,22,57,63,53,94,18,-63,59,-33,-21,64,16,24,12,-63,-23,38,-123,64,66,96,11,65,-51,-52,-128,-64,88,57,-12,-66,-35,36,102,64,72,-57,-37,-65,-12,-3,-28,64,7,43,27,65,8,-2,24,-63,-18,124,3,65,-100,-60,-36,-64,4,86,46,-64,-84,28,50,-64,127,106,-84,-64,-121,22,-71,-65,59,-33,9,65,-80,-116,-105,-67,80,-115,79,-64,-106,67,48,64,125,63,-47,64,123,20,-26,-64,113,61,10,63,-90,-101,36,63,20,-77,-121,62,63,53,-62,64,-66,-97,8,65,-118,-82,69,-64,-37,-87,54,-64,-112,-37,-59,60,125,63,-15,-64,-128,-70,-100,64,57,4,-55,64,-105,18,9,-63,-12,-3,12,-63,82,-83,-72,64,-119,65,22,65,94,-70,-3,-64,-123,-21,119,64,-10,40,-36,-64,43,-121,-102,64,51,51,3,65,53,-80,-26,-64,88,-103,-85,-64,-88,-58,11,-63,-127,53,-48,-64,-68,-60,-85,-64,98,-112,16,-63,104,-111,-67,-65,12,2,-5,64,-84,28,12,65,-127,-107,9,65,-4,-87,11,-63,-77,-56,54,-65,-49,-9,91,64,125};

//const PROGMEM char neuralnetwork_data[753]={3,0,0,0,4,0,0,0,20,0,0,0,4,0,0,0,-56,85,-122,65,-127,-83,-85,65,108,55,-116,64,16,54,-1,-65,52,62,87,-63,25,22,-54,-64,-52,113,111,-63,-39,-23,0,65,-5,107,120,65,47,1,-89,-63,25,7,69,-63,107,28,49,-63,60,-100,-110,-66,-113,-116,-57,-63,126,-56,-67,-63,103,-38,-49,64,54,-8,-75,65,-110,83,57,-63,-4,-90,-100,65,7,-115,-75,-63,67,-115,-123,-63,88,-90,-119,-63,-69,28,-6,-64,-128,23,88,65,90,29,-99,65,55,-5,78,-63,46,11,34,65,27,93,-7,64,9,85,-62,-63,55,-1,-94,-63,-91,-102,-102,-65,17,-51,34,65,-45,-79,-126,-63,96,-77,23,65,95,34,-79,-63,-11,19,-81,-63,-26,-94,101,65,-94,78,16,-63,-29,90,-116,-63,10,-31,48,65,-104,78,-67,64,-69,-21,-88,-63,66,6,-44,64,48,60,-87,65,78,-98,70,-63,79,-46,-113,64,-55,31,51,-63,93,43,-71,-64,70,96,-25,-64,72,40,14,-64,68,75,8,-63,-68,-51,-125,-63,-5,-51,-86,-64,-68,55,27,63,105,-107,64,65,31,-23,57,63,-121,-101,-99,65,-1,88,-7,-64,95,9,-63,65,-32,23,-88,-63,67,-92,-125,-64,-40,-80,-107,-63,109,-46,1,65,74,46,-87,64,80,77,120,-66,1,94,-121,63,-16,-106,-62,-63,-27,63,19,-63,4,23,-25,64,118,-17,-93,65,-118,96,-26,64,-105,116,-80,65,0,102,13,-64,31,20,80,-63,-48,-63,87,-63,-70,53,-62,65,-93,-72,-58,-63,-88,21,-119,65,-40,86,-128,-63,-76,36,105,-63,23,-75,-89,64,53,73,-72,-63,76,116,66,63,-11,51,-51,-65,113,-36,-11,64,11,98,120,64,-104,45,-96,65,-17,19,-112,-63,51,-101,-111,65,113,-88,-106,-63,31,-102,-74,-64,-73,-12,-112,-63,-105,-58,-60,65,-29,-19,3,-63,-18,-61,-104,65,-83,-118,125,-63,127,-77,-66,-63,-24,24,-111,-64,31,-63,33,-63,-9,-38,-111,65,26,83,45,-63,-118,-25,-62,-64,-76,68,123,64,-49,58,3,65,-82,112,37,65,120,-24,-120,-64,-122,13,105,-63,-57,-30,55,65,-70,86,1,65,100,119,56,65,-116,-100,-81,-64,-51,-98,-69,65,53,-8,-111,65,122,34,-57,-63,107,-52,-71,65,-39,1,19,-63,34,-91,-103,-63,-60,-86,-73,64,22,-13,-57,-63,49,-16,19,-63,55,-51,64,-63,17,-18,46,-63,-51,-34,107,65,-69,-27,-120,65,-12,-55,55,-63,20,-89,-74,64,-42,-52,107,-63,-128,-50,63,-63,14,-103,-1,64,32,46,81,-63,81,122,-128,-66,-119,24,-96,65,-5,-117,-96,65,-71,4,-70,-63,-109,81,83,65,-95,11,-75,65,-93,117,-81,-63,112,-77,58,-63,-98,81,-117,65,71,-53,-96,64,-79,-61,-117,65,98,-7,86,65,16,51,-54,-64,-61,-120,77,65,-57,80,-67,-63,78,-26,0,-63,22,88,-91,-63,-15,-63,120,-63,-44,89,-23,-64,-11,119,30,65,7,29,34,65,-67,-95,-127,65,123,5,-84,65,-39,67,-61,-63,51,92,-98,-64,-51,-64,-103,65,-38,104,-58,-63,98,-47,-14,-64,68,-75,-86,65,-92,119,-48,-64,26,-96,-89,65,91,92,95,65,65,-51,-85,-63,92,-80,85,-63,10,-52,-69,65,63,-125,-75,-63,12,-124,-105,-64,-41,45,90,-64,19,77,2,64,41,-114,117,65,113,41,-76,-64,98,-109,-70,-63,86,-13,43,65,-80,-91,-101,-63,-72,22,-86,64,14,124,-115,65,56,-57,86,-63,-112,-15,-76,-63,52,-89,83,64,-34,-81,-62,-63,-81,4,95,-63,-16,-11,12,-64,110,123,-63,-63,-17,63,-108,-63,125};

//const PROGMEM char neuralnetwork_data[753]={3,0,0,0,4,0,0,0,20,0,0,0,4,0,0,0,-110,-77,58,66,3,45,84,-63,-47,-64,-44,-63,3,-39,-113,65,110,-83,30,66,-12,49,95,-63,112,92,-14,65,96,63,-102,65,87,42,37,66,97,-47,-87,-63,-115,-14,-87,-63,-45,114,10,-63,118,-104,17,-64,64,40,-111,-63,111,-87,-76,65,63,70,51,-62,-40,109,15,65,38,15,-23,-64,25,55,62,66,-62,115,51,-64,80,-102,-120,-64,103,-104,-77,-64,-62,-122,-89,-63,66,-95,107,-63,119,-102,60,-62,70,-48,42,-62,-77,2,32,-62,98,-80,21,66,72,-44,-14,64,-50,-111,-85,64,52,-102,48,-62,12,-51,-9,63,82,-72,45,66,-101,-21,52,-62,68,-121,1,-62,-23,-70,24,-63,-95,-21,-101,-63,113,-104,-70,65,64,95,96,-63,-2,95,-121,-63,-91,79,108,-64,115,122,1,66,122,-72,113,-63,117,-3,-41,-63,62,104,-61,65,53,57,-75,-63,-14,-128,68,-63,111,105,13,66,-96,111,93,-63,124,78,-15,-64,-80,83,-111,-63,43,91,-17,-63,50,14,96,65,-43,-100,49,-62,-34,105,-16,64,68,18,16,-64,1,-83,-70,-63,108,-88,-13,65,-35,-86,113,-63,11,-41,-81,65,-26,82,-36,65,76,-3,45,65,110,-51,-32,64,-117,-121,-14,65,16,77,10,64,15,-76,83,-63,5,-51,62,-63,-69,-38,-2,-64,55,-26,109,65,-123,-64,-58,64,-32,-122,91,-63,14,18,28,-62,-24,-77,79,65,-65,5,-122,-65,24,-5,-72,-63,73,-120,20,-62,116,-69,-89,-63,-45,14,-40,65,-110,124,-32,-63,-6,85,114,-63,98,-115,23,64,83,-21,103,65,-37,-107,-1,-63,-60,-15,13,65,-111,46,74,-63,88,118,-31,-64,-80,-40,1,-62,1,-7,25,65,83,-24,-126,65,78,104,69,-64,-11,-87,-39,63,5,72,125,-63,-16,-102,-37,64,46,-96,-86,-63,-46,-17,75,65,-97,114,-57,64,59,-26,10,66,-91,-58,-100,64,-87,89,-110,-63,91,17,-40,-63,-124,115,47,65,38,3,-31,63,71,-118,97,-63,-50,-12,115,-63,68,-91,-18,-63,-43,50,-95,-63,-125,-3,-12,64,103,-122,-113,65,-39,28,-124,-65,-111,-111,-127,63,90,-46,-54,-64,-35,-13,4,-62,-59,-12,-97,65,54,32,-127,65,20,-51,23,65,52,-126,96,-63,-101,-63,46,66,-55,36,67,66,46,78,15,-63,-30,51,-39,63,100,-88,-51,-63,95,12,54,-64,-18,29,61,66,-85,-41,-41,65,-54,-9,71,66,124,-21,-42,62,43,20,84,-63,98,-69,31,-62,71,-50,15,66,-13,61,-88,65,0,-126,11,66,-122,-102,-90,65,-125,30,21,-62,-86,-63,-35,-64,-40,16,23,66,-64,51,100,-63,-112,-115,0,66,-3,-101,20,65,123,-79,-38,65,88,-11,-21,64,10,-73,97,65,105,-111,55,66,-8,85,41,66,121,-77,6,66,96,23,-32,-63,-17,125,52,-63,43,36,58,-62,115,-6,-110,-63,-117,-121,-20,65,30,111,-127,65,29,-29,26,-62,-50,-28,-110,-63,-88,44,-113,-64,124,14,-35,-63,-64,91,68,-64,119,49,-70,65,53,-50,49,-62,-96,-9,18,-62,70,-61,-39,-63,-39,72,51,66,109,82,63,-63,45,-109,46,-64,-62,66,-53,-63,43,-109,-83,-63,16,11,48,-62,53,110,-113,-63,84,-39,-91,-64,-84,78,33,65,-125,4,9,-62,61,-28,60,-62,64,54,112,65,-6,-100,-118,-64,42,-5,-45,-63,-70,70,37,-62,96,-40,8,-63,-58,127,-121,-63,28,-12,27,66,-91,81,-105,65,12,22,-1,-63,-49,-34,55,-62,125,12,-77,-63,41,-110,13,-62,3,2,-48,-63,54,-111,5,-63,125};

const PROGMEM char neuralnetwork_data[2437]={4,0,0,0,4,0,0,0,20,0,0,0,20,0,0,0,4,0,0,0,-106,67,-73,-64,-109,24,124,64,-25,-5,13,-63,-113,-52,-43,63,49,8,-36,63,39,49,-44,64,-88,-58,19,65,29,90,76,63,-26,-74,115,-66,39,49,-88,64,104,-111,-7,-64,57,-76,120,-64,-9,-9,13,65,41,92,23,-64,-41,-103,-120,64,36,92,-5,-64,-35,36,-10,-65,121,-23,70,-64,37,6,121,64,113,61,6,65,-4,-87,105,-64,-77,58,59,64,55,-119,19,65,-93,-35,13,-63,-63,-54,9,64,94,-70,25,64,-84,-15,82,64,-47,34,21,-63,8,-84,116,62,-33,79,-7,-64,106,-68,124,64,2,43,103,63,-100,-60,-60,64,-16,-89,-74,63,-27,-48,29,65,-80,114,8,-64,-80,114,-8,-65,-80,114,-112,64,-127,53,-100,64,-94,69,-6,64,21,-123,107,-66,-86,11,-30,64,115,104,7,-63,-59,32,-96,-64,27,47,15,-63,35,-42,-71,64,-37,-7,54,-64,-41,-93,-112,-64,-102,-103,-23,-64,-70,73,-20,64,-59,32,-60,-64,51,51,115,-65,53,53,-98,62,-96,26,23,65,45,-78,93,-64,-123,5,13,65,43,-121,-26,-65,-8,83,29,65,109,-25,23,65,43,-41,-102,64,-16,-89,-2,-64,-123,-101,81,-66,117,-109,-120,-64,66,96,-111,64,-104,110,12,-63,10,-41,15,-63,63,53,12,65,-39,-60,55,-65,-59,32,-16,63,98,16,104,64,-92,112,-47,-64,-49,-9,-1,64,-33,79,61,-64,-31,122,10,-63,-10,40,-32,-64,-113,-62,-79,-64,96,-27,-28,64,-104,67,11,62,-102,-103,-103,-67,92,-113,-58,64,51,25,-60,-64,16,-116,23,62,-70,73,6,-63,-63,-54,-123,64,-113,-62,-127,-64,104,-111,-19,-65,2,-85,41,-65,-90,-101,-124,64,-43,120,-35,-64,29,85,-108,-65,-68,116,-125,-65,47,-35,-24,-64,-55,118,-82,-65,-57,75,-121,63,-78,-99,103,64,-76,-56,-58,64,29,90,-108,64,104,-111,-127,64,-49,71,-124,-64,88,57,-76,62,106,-68,20,63,92,-113,-42,64,-74,-13,24,-64,115,104,-15,64,-18,124,-65,-66,-90,-101,52,-64,112,61,-54,-64,66,-68,36,-64,-78,-99,47,-64,40,92,-97,-65,-85,-58,43,63,113,61,-122,64,-98,-17,-9,64,113,61,18,-63,20,-82,95,64,-16,-89,-38,64,125,63,15,-63,0,0,-68,-64,94,-70,73,63,-113,-94,-49,64,-115,-105,-82,-65,-92,112,-75,-64,-121,22,-43,63,-73,-54,-83,64,-121,22,-31,64,-76,-56,8,-63,-88,-58,-81,-64,-43,120,-43,64,0,0,-80,64,70,28,-57,62,-106,67,-1,-64,-84,28,-14,-64,-46,77,58,-64,-73,-13,93,-64,-29,-91,31,65,117,19,-26,63,-74,-13,125,61,-86,-15,-49,-64,56,-119,1,65,72,-31,106,64,43,0,-98,-65,-14,-46,-99,-65,86,14,-71,-64,-96,26,95,-64,74,12,26,65,123,20,-126,64,27,47,27,65,50,-35,-32,64,61,10,3,65,-45,77,74,-64,125,63,93,64,-39,77,-38,-64,-113,-62,-107,63,-123,-21,5,-63,119,-66,9,65,84,-29,-27,-65,115,104,-30,-64,-70,73,-36,-64,0,0,30,65,84,-29,-119,64,80,-115,23,-66,0,0,4,65,-88,-58,-21,64,-125,-64,82,64,-37,-7,-30,-64,8,-84,108,64,-80,114,-100,-64,-121,22,-103,63,-33,79,109,64,-86,-15,24,65,-119,65,-92,-64,47,-35,-16,-64,-94,69,-42,-65,-6,126,96,-65,-23,38,-107,-64,63,53,-74,-64,25,4,24,65,119,-66,9,-63,-69,-13,-11,64,-84,28,-10,64,92,-113,-30,-65,-25,77,-110,63,-109,24,18,-63,-51,-52,-116,64,119,-66,95,-65,92,-113,-70,64,-82,71,25,-64,-80,114,-72,-65,104,-111,-87,64,-82,71,33,-64,79,96,-91,62,-10,53,-51,-64,55,62,-127,-64,14,45,22,-63,-10,40,2,-63,-70,73,-4,64,-96,23,22,65,52,-113,2,-66,64,-67,-15,-64,70,102,-105,64,51,51,-77,-64,-20,38,27,65,24,45,-118,64,117,-109,-40,63,1,-4,107,-64,104,17,-85,-64,-72,30,18,-64,-23,44,95,-64,41,-4,71,64,29,90,-32,64,119,-66,79,-64,6,-127,-43,-64,6,-127,-27,63,33,-80,4,-63,63,48,14,64,-88,-58,-73,64,16,88,-127,64,37,6,105,64,-80,114,-60,64,-90,114,24,64,16,-127,23,-63,-12,-3,8,-63,4,86,16,65,-84,28,20,-63,-69,-12,21,60,55,-78,-19,63,-106,67,-5,-64,25,4,30,65,-98,-17,-25,64,33,-80,-102,64,-53,38,20,-63,-20,81,-40,63,82,-72,-62,64,-123,-21,19,-63,-63,-54,-83,-64,-117,108,7,63,-45,77,2,-64,-80,114,-48,-64,111,18,-89,64,-45,77,98,64,-16,-89,86,-64,25,4,110,64,119,-66,-53,64,16,88,-103,64,70,-74,-29,63,84,-29,-95,-64,-61,-11,8,63,94,-70,-123,-64,-33,79,9,65,-71,-52,84,-64,61,62,3,65,72,-31,-82,64,72,-31,-114,64,-111,-19,100,64,-16,-89,-58,64,2,43,-113,64,-84,28,-110,-64,-16,-89,-106,64,51,51,-117,64,68,-117,16,65,-6,-125,-22,-66,-94,69,-74,63,-87,34,59,-64,-20,81,0,-63,-68,116,11,64,92,-113,-26,63,117,-109,32,64,10,-46,-49,64,-84,-13,-67,63,66,96,-67,-64,-18,124,103,-64,123,20,2,65,-111,21,-123,64,-53,-95,17,65,12,2,59,64,-35,100,-125,-64,-66,-97,-66,-64,-61,-11,28,65,-104,110,-14,-65,0,0,-20,-64,76,55,-27,-64,23,-39,-22,-64,-35,36,-114,64,111,18,-53,-64,-78,-99,-57,64,59,-33,63,-64,91,100,-113,64,125,63,5,-63,-41,-93,4,-63,-35,36,-102,-64,35,-37,-31,64,78,98,-96,63,-117,108,-45,64,70,-74,-69,-64,121,-87,77,64,-127,-107,-101,-64,-61,-11,-72,64,28,-2,-4,-64,123,-32,5,-63,-96,26,47,-64,111,18,-17,-64,-74,-13,-3,-65,98,16,4,-63,35,-37,-43,64,-127,-107,-53,64,93,-21,3,-63,69,-74,-49,64,-53,-95,69,-64,98,16,-56,64,-41,-123,64,-64,47,-110,76,64,-12,72,29,-64,106,-73,-48,64,-90,-126,-124,63,99,-33,-77,-64,-127,-107,27,65,55,-93,-80,63,16,28,21,65,34,-37,57,63,117,-45,-103,-64,86,-64,4,-64,39,49,-56,63,-61,-11,-44,-64,-84,-36,-96,-64,86,57,20,-63,49,8,-68,-65,-17,-108,28,-63,-66,-54,-7,64,4,11,46,63,14,45,-102,64,123,20,-18,62,18,-84,-52,64,-125,-64,34,-64,-43,120,105,-67,-58,32,-16,-65,-29,67,29,-63,37,95,-34,-64,60,-2,-114,64,33,-80,58,-64,33,-39,20,65,-16,-99,-2,64,-59,-86,-122,64,41,49,40,-65,91,75,-113,64,92,-72,-102,-64,54,-28,27,-64,53,94,122,62,110,104,57,64,84,-29,69,-64,-67,-97,11,-63,-69,21,2,65,-16,7,-106,63,-53,-55,-71,-64,100,59,17,65,-97,-125,-100,63,-10,40,76,-64,-120,22,25,-64,33,-80,-14,63,-70,83,-24,-64,18,-125,-128,64,-51,16,-71,-64,84,-29,-111,64,-81,-38,-44,63,-43,120,65,64,49,8,24,65,80,-19,-74,-64,-11,122,81,64,18,79,-18,-64,-74,-13,-3,-66,123,20,18,65,76,55,73,-64,-104,110,34,-64,-20,76,-82,64,4,86,-98,-64,113,41,-38,-65,-101,-103,-67,64,97,16,40,64,-43,-72,-102,-64,-16,-89,-116,-65,78,98,-68,64,-23,38,-27,-64,113,61,-42,-64,33,-80,-46,-64,-102,90,2,64,-18,124,-17,64,-59,32,-108,64,31,51,5,65,72,49,9,-63,-73,102,94,-64,35,-37,-111,-64,-125,-64,-82,64,5,11,6,64,-25,-5,21,-63,-100,-60,-8,-64,108,79,-100,-64,41,52,-39,64,21,73,-18,64,27,47,-107,64,29,90,-94,64,-20,-71,89,-64,-4,-128,-71,63,102,-44,10,65,98,16,-40,-65,-43,-93,4,-63,27,-5,-30,64,121,-23,-22,64,116,124,-47,64,39,8,18,-63,-51,-31,-58,-65,13,-98,-47,64,-89,115,-7,64,-23,38,113,64,5,81,-66,64,-30,96,1,65,86,62,2,-63,104,86,-114,-66,-71,-52,60,64,-125,57,-125,64,115,-72,1,65,10,-41,-93,-66,77,6,-127,-66,-55,118,-30,64,7,-13,89,-64,-4,117,19,-63,-121,3,-48,-65,-73,-13,57,64,23,-39,126,64,43,7,12,-63,-115,24,-40,64,19,85,19,-63,-110,92,-59,63,-22,-42,-128,-65,16,-62,-27,-64,-84,28,4,-63,-7,34,-66,-64,119,10,-113,-64,3,-39,-38,64,2,91,-103,-65,123,-12,-97,-64,-88,70,-119,-64,-18,114,55,-64,-121,22,18,-63,-86,-15,-42,64,49,72,109,-65,121,-23,-78,64,117,86,-68,-64,-119,60,24,-63,-2,-64,-118,-64,-45,97,-10,-64,-21,-4,-52,63,-27,-48,-62,63,-16,-115,-41,-65,-67,7,30,65,81,-78,-26,-64,-122,-103,69,-64,-10,20,4,-64,63,53,-34,63,-112,21,-36,-64,59,-13,-109,-64,115,-56,-104,-65,43,-121,28,-63,-23,-58,81,64,-53,79,28,65,-66,-97,-102,64,-47,103,-84,63,37,-58,-69,64,43,53,-74,-64,110,104,17,-63,-112,-103,33,-64,113,14,-64,64,-61,-11,-24,-64,19,-82,27,65,109,-25,19,-63,71,-123,-5,63,-41,-93,-80,-65,-70,73,-72,-64,101,16,-60,-64,59,-33,3,65,121,-23,-34,-64,12,2,59,64,-37,-7,-66,-66,69,-25,-1,64,8,-84,-80,-64,12,2,35,64,39,49,96,-64,-18,124,15,-64,-102,-103,31,-63,-16,-89,-18,64,76,55,65,-64,-10,40,-36,-65,113,61,20,65,-122,-103,-119,-64,72,-31,98,64,-98,-17,-17,64,115,40,-68,64,-88,-58,-101,63,16,88,-103,-67,-119,65,96,-66,-53,-95,-7,-64,-102,71,5,65,72,-31,-54,63,109,-25,23,-63,123,20,-98,64,41,82,47,-64,115,104,-31,-65,74,12,-50,-64,-109,65,-64,63,-80,-101,-60,-65,-31,122,2,65,-8,83,99,63,-29,-91,-1,-64,84,-29,13,-64,82,-112,-114,-65,37,6,-7,-64,-14,-56,-43,64,88,97,-84,64,13,2,107,-64,-66,-87,-42,64,23,89,81,-65,-88,-58,103,64,127,106,-96,-64,-84,28,-90,-64,80,-115,-85,64,-20,81,-100,64,-35,36,-10,-64,-49,-9,-93,63,-43,125,121,-64,-123,-21,9,64,2,2,15,-63,106,108,60,-64,-21,81,-8,62,98,16,16,-64,121,-23,-102,-64,80,-115,3,-63,-70,73,-56,64,3,-6,126,-66,-23,38,-107,-64,78,98,-68,-64,-31,122,-28,-65,55,-119,29,65,49,8,-96,64,43,-121,-66,64,-9,-64,23,-64,14,45,28,-63,-125,-64,2,65,25,4,-74,-64,-121,22,57,63,53,94,18,-63,59,-33,-21,64,16,24,12,-63,-23,38,-123,64,66,96,11,65,-51,-52,-128,-64,88,57,-12,-66,-35,36,102,64,72,-57,-37,-65,-12,-3,-28,64,7,43,27,65,8,-2,24,-63,-18,124,3,65,-100,-60,-36,-64,4,86,46,-64,-84,28,50,-64,127,106,-84,-64,-121,22,-71,-65,59,-33,9,65,-80,-116,-105,-67,80,-115,79,-64,-106,67,48,64,125,63,-47,64,123,20,-26,-64,113,61,10,63,-90,-101,36,63,20,-77,-121,62,63,53,-62,64,-66,-97,8,65,-118,-82,69,-64,-37,-87,54,-64,-112,-37,-59,60,125,63,-15,-64,-128,-70,-100,64,57,4,-55,64,-105,18,9,-63,-12,-3,12,-63,82,-83,-72,64,-119,65,22,65,94,-70,-3,-64,-123,-21,119,64,-10,40,-36,-64,43,-121,-102,64,51,51,3,65,53,-80,-26,-64,88,-103,-85,-64,-88,-58,11,-63,-127,53,-48,-64,-68,-60,-85,-64,98,-112,16,-63,104,-111,-67,-65,12,2,-5,64,-84,28,12,65,-127,-107,9,65,-4,-87,11,-63,-77,-56,54,-65,-49,-9,91,64,125};


//calibration
double _ard_old_rotation = 0;
double _ard_done = -1;
bool _ard_sens_dance = false;
int32_t _ard_time_past = 0;
int number_rotation = 0;


//brain
MachineLearning machine;
unsigned char memoire[] = {0, 0};
unsigned char data[] = {0, 0, 0, 0};
double rotation = 0;
double distance = 0;

unsigned long start_chrono = 0;
int speed_l = 0, speed_r = 0;

Servo servo_g, servo_d;

struct Line {
  double x1, y1;
  double x2, y2;
};

//function
double getRotation(double x1, double y1, double x2, double y2);
void goTo(double angle, double &rotation, int &speed_r, int &speed_l, bool sens = false);
Line setRotation(double rotation);
double getDistance(int pin, int timeout);
void updateRotation(double &rotation, double speed_l, double speed_r, unsigned long tm);
void setSpeed(Servo &servo, int vitesse);
void ard_calibration_rotation();
bool ard_goTo(double angle, double rotation, int &speed_r, int &speed_l, double &old_rotation, double &done, bool sens);
int freeRam();

//main
void setup() {
  srand(analogRead(0));

  #ifndef NO_INFORMATION
  Serial.begin(9600);
  std::cout << "MemoireGe:" << freeRam() << std::endl;

  std::cout << "Construction du modele" << std::endl;
  #endif
  //neural network
  machine.loadStructure(neuralnetwork_data);
  
  //machine.open(4);
  //std::cout << "Memoire4:" << freeRam() << std::endl;
  //machine.addColumn(20);
  //std::cout << "Memoire10:" << freeRam() << std::endl;
  //machine.addColumn(20);
  //std::cout << "Memoire20:" << freeRam() << std::endl;
  //machine.addColumn(4);
  //std::cout << "Memoire4:" << freeRam() << std::endl;

  //on charge le r√©seau de neurones
  machine.backupTraining(neuralnetwork_data);

  #ifndef NO_INFORMATION
  std::cout << "Reseau de neurones charg√©." << std::endl;

  std::cout << "Memoire:" << freeRam() << std::endl;
  #endif

  //on g√®re les servommoteurs
  servo_g.attach(SERVO_G_PIN);
  servo_d.attach(SERVO_D_PIN);
  pinMode(CAPTEUR_US, OUTPUT);
  digitalWrite(CAPTEUR_US, LOW);
  delay(100);
}

void loop() {
  unsigned long tm = millis() - start_chrono;
  start_chrono = millis();
  updateRotation(rotation, speed_l, speed_r, tm);
  //on doit maintenir la loop a une certaine fr√©quence
  distance = getDistance(CAPTEUR_US, TIMEOUT) * FACTEUR_DISTANCE;
  if (distance > DIST_MAX) distance = DIST_MAX;
  
  #ifndef NO_INFORMATION
  std::cout << "fps:" << 1000.0 / (double)tm << std::endl;
  std::cout << "rotation:" << rotation / PI * 180.0 << std::endl;
  //Serial.println("distance:"+String(distance)+"cm");
  #endif

  //apr√®s la calibration faites, on lance 
  if(number_rotation==2){

    //info r√©el
    data[0] = (unsigned char)(int(double(int(rotation) % 360) / 360.0 * 255.0));
    data[1] = (unsigned char)(int(distance / DIST_MAX * 255.0));
  
    //info de memoire
    memcpy((char*)(data + 2), memoire, 2);
  
    //on donne les infos au r√©seau de neurones
    machine.setInput((char*)data);
    machine.calcul();
  
    //on remplit la m√©moire pour prochain passage
    memoire[0] = (unsigned char)(int)(machine.getOutput(2)*255.0);
    memoire[1] = (unsigned char)(int)(machine.getOutput(3)*255.0);
    //Serial.println(memoire[0]);
    //Serial.println(memoire[1]);
    
  
    //on envoie les infos moteur
    speed_l = int((machine.getOutput(0) - 0.5) * 2.0 * 100.0);
    speed_r = int((machine.getOutput(1) - 0.5) * 2.0 * 100.0);
  
  }

  ard_calibration_rotation();

  setSpeed(servo_g, int(speed_l) + G_CORREC);
  setSpeed(servo_d, int(-speed_r) + D_CORREC);


  //on g√®re la fr√©quence de rafraichissement
  unsigned long duration = millis() - start_chrono;
  if (double(duration) < 1000.0 / FPS) {
    delay(int(1000.0 / FPS - double(duration)));
  }
}



//fonctions
double getRotation(double x1, double y1, double x2, double y2) {
  double deltaX = x2 - x1;
  double deltaY = y1 - y2;
  double rotation;
  if (deltaX != 0) {
    rotation = atan((double)(deltaY) / deltaX);
  } else {
    //h n'est jamais nul ici
    double h = sqrt(deltaX * deltaX + deltaY * deltaY);
    rotation = asin((double)(deltaY) / h);
  }

  if (deltaX < 0) {
    rotation += PI;
  }

  if (rotation < 0) rotation += 2 * PI;

  return rotation;
}

void goTo(double angle, double &rotation, int &speed_r, int &speed_l, bool sens) {
  //si la diff√©rence est de plus de 5 degres, on fait tout bouger
  if (int(abs(angle - rotation) / PI * 180.0) % 360 > 5) {
    speed_r = (sens) ? 100.0 : -100.0;
    speed_l = (sens) ? -100.0 : 100.0;
  } else {
    speed_r = 0;
    speed_l = 0;
  }
}


Line setRotation(double rotation) {
  Line line;
  //on place le baton
  line.x1 = (0 + RAYON_BASE * cos(M_PI + rotation));
  line.y1 = (0 - RAYON_BASE * sin(M_PI + rotation));
  line.x2 = (0 + RAYON_BASE * cos(rotation));
  line.y2 = (0 - RAYON_BASE * sin(rotation));
  return line;
}

double getDistance(int pin, int timeout) {
  pinMode(pin, OUTPUT);
  digitalWrite(pin, HIGH);
  delayMicroseconds(5);
  digitalWrite(pin, LOW);
  pinMode(pin, INPUT);
  double duration = (double)pulseIn(pin, HIGH, timeout);
  if (duration == 0) {
    duration = timeout;
  }

  double distance = VITESSE_SON * 100.0 * duration / 1000000.0;
  distance = distance / 2.0;
  distance = (distance > DIST_MAX) ? DIST_MAX : distance;
  return distance;
}

void updateRotation(double &rotation, double speed_l, double speed_r, unsigned long tm) {
  //int√©gration de la vitesse de la roue pour trouver l'angle de rotation

  //modif sur la vitesse pour qu'elle soit angulaire
  speed_r = speed_r / 100.0 * FULL_SPEED / RAYON_BASE;
  speed_l = speed_l / 100.0 * FULL_SPEED / RAYON_BASE;

  //on tourne autour de la roue gaguche
  double angle = rotation;
  Line line = setRotation(angle);

  if (speed_r != 0) {
    angle += speed_r * double(tm) / 1000.0;
    line.x2 = line.x1 + 2.0 * RAYON_BASE * cos(angle);
    line.y2 = line.y1 - 2.0 * RAYON_BASE * sin(angle);
  }

  if (speed_l != 0) {
    angle -= speed_l * double(tm) / 1000.0;
    line.x1 = line.x2 + 2.0 * RAYON_BASE * cos(M_PI + angle);
    line.y1 = line.y2 - 2.0 * RAYON_BASE * sin(M_PI + angle);
  }

  //on enregistre la rotation
  rotation = getRotation(line.x1, line.y1, line.x2, line.y2);
}


double getSpeedAngle(double rotation, double old_rotation){
    double speed_angle1 = (rotation-old_rotation)/M_PI*180.0;
    if(speed_angle1>360) speed_angle1-=360;
    if(speed_angle1<0) speed_angle1 += 360;


    double speed_angle2 = (old_rotation-rotation)/M_PI*180.0;
    if(speed_angle2>360.0) speed_angle2-=360.0;
    if(speed_angle2<0.0) speed_angle2 += 360.0;
    return (speed_angle1<=speed_angle2)?speed_angle1:speed_angle2;
}


void ard_calibration_rotation(){
  if(number_rotation!=2){
    if(ard_goTo(PI*2.0,rotation,speed_r,speed_l,_ard_old_rotation,_ard_done, _ard_sens_dance)){
        _ard_done = -1;
        _ard_sens_dance = !_ard_sens_dance;
        number_rotation+=1;
    }
  }
}

bool ard_goTo(double angle, double rotation, int &speed_r, int &speed_l, double &old_rotation, double &done, bool sens){
    if(done==-1){
        old_rotation = rotation;
        done = 0;
    }
    angle = angle/M_PI*180.0;
    double speed_angle = getSpeedAngle(rotation, old_rotation);
    done += speed_angle;
    old_rotation = rotation;
    if(angle<=done){
        //on a atteint le bon angle
        speed_r = 0;
        speed_l = 0;
        return true;
    }else{
        //cout << "done:" << done << ", angle:" << angle << endl;
        //cout << speed_angle << endl;
        speed_r = sens?100.0:-100.0;
        speed_l = sens?-100.0:100;
    }
    return false;
}

void setSpeed(Servo &servo, int vitesse) {
  servo.writeMicroseconds(map(vitesse, -100, 100, 1300, 1700));
}

int freeRam ()
{
  extern int __heap_start, *__brkval;
  int v;
  return (int) &v - (__brkval == 0 ? (int) &__heap_start : (int) __brkval);
}
